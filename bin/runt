#!/usr/bin/env node

var pkg = require(process.cwd() + '/package.json');
var path = require('path');
var exec = require('child_process').exec;
var runt = {};
var BASE_DIR = path.join(__dirname, '/../');

function PascalCase(str) {
  var parts = str.split('-');
  for (var i=0, l=parts.length; i<l; i++) {
    parts[i] = parts[i].substring(0, 1).toUpperCase() + parts[i].substring(1);
  }
  return parts.join('');
}

function ex(command, vars) {
  vars = vars || {};
  vars.BASE_DIR = BASE_DIR;
  vars = Object.keys(vars).map(function (key) {
    return key + '=' + vars[key];
  }).join(' ');

  exec(vars + ' ' + command, function (err, stdout, stderr) {
    if (err) throw err;
    if (stdout) console.log(stdout);
    if (stderr) console.log(stderr);
  });
}

runt.build = function build(argv) {
  if (argv.dev || argv.D) {
    ex(BASE_DIR + '/scripts/build-dev');
  } else {
    ex(BASE_DIR + '/scripts/build', {
      COMPONENT_NAME: PascalCase(pkg.name),
      COMPONENT_FILE: pkg.name
    });
  }
};

runt.test = function test(argv) {
  ex(BASE_DIR + '/scripts/test');
};

runt.release = function release(argv) {
  if (argv.preview || argv.P) {
    ex(BASE_DIR + '/scripts/release-preview');
  } else {
    ex(BASE_DIR + '/scripts/release');
  }
};

runt.pages = function pages(argv) {
  console.log('pages...');
};

runt.help = function help() {
  console.log('Usage: runt <command> [<args>]');
  console.log('');
  console.log('Available commands:');
  console.log(' build     Build the project and copy the generated files to dist/');
  console.log(' test      Run the test suite');
  console.log(' release   Publish a new release to npm');
  console.log(' pages     Deploy the example to gh-pages');
  console.log(' help      Show this help');
};

function main(argv) {
  if (argv._[0] && typeof runt[argv._[0]] === 'function') {
    runt[argv._[0]](argv);
  } else {
    runt.help();
  }
}

main(require('minimist')(process.argv.slice(2)));
